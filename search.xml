<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android Camera 实时滤镜]]></title>
      <link href="http://www.cblog.cc/2015/09/03/Android-Camera-%E5%AE%9E%E6%97%B6%E6%BB%A4%E9%95%9C/"/>
      <url>http://www.cblog.cc/2015/09/03/Android-Camera-%E5%AE%9E%E6%97%B6%E6%BB%A4%E9%95%9C/</url>
      <content type="html"><![CDATA[<p>版权声明：转载自<a href="http://blog.csdn.net/wyhuan1030/article/details/45094715" title="Neil Android Camera" target="_blank" rel="external">http://blog.csdn.net/wyhuan1030/article/details/45094715</a></p>
<h1 id="一、Android系统将内置滤镜功能">一、Android系统将内置滤镜功能</h1><p>滤镜功能有二十余种不同效果，不逊色于极受欢迎的智能手机应用Instagram所产生的效果。</p>
<p><img src="http://img.blog.csdn.net/20150417112538878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>1、颜色矩阵 ColorMatrix</p>
<p>android中可以通过颜色矩阵（ColorMatrix类）方面的操作颜色，颜色矩阵是一个5x4 的矩阵。可以用来方面的修改图片中RGBA各分量的值，颜色矩阵以一维数组的方式存储如下：<br> [ a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t ]<br>他通过RGBA四个通道来直接操作对应颜色，如果会使用Photoshop就会知道有时处理图片通过控制RGBA各颜色通道来做出特殊的效果。</p>
<p>这个矩阵对颜色的作用计算方式如示：</p>
<p><img src="http://img.blog.csdn.net/20150417112506439?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>矩阵的运算规则是矩阵A的一行乘以矩阵C的一列作为矩阵R的一行，</p>
<p>C矩阵是图片中包含的ARGB信息，R矩阵是用颜色矩阵应用于C之后的新的颜色分量，运算结果如下：</p>
<p>R’ = a<em>R + b</em>G + c<em>B + d</em>A + e;<br>G’ = f<em>R + g</em>G + h<em>B + i</em>A + j;<br>B’ = k<em>R + l</em>G + m<em>B + n</em>A + o;<br>A’ = p<em>R + q</em>G + r<em>B + s</em>A + t;</p>
<p>Ps：第1~3列是控制色相的，第4列是控制透明度的，第5列是分量的增加值。</p>
<p>2、基本滤镜效果的实现：</p>
<p>如果我们用ColorMatrix调整RGB三种颜色的比重，就可以实现诸如单色、黑白的效果。</p>
<p>3、Lomo滤镜效果的实现：</p>
<p>改变图像数值+遮罩</p>
<h1 id="二、Android平台滤镜">二、Android平台滤镜</h1><p>滤镜这个功能在目前的市场上应用很广泛，发展也非常快，总结起来，基本上有以下三种应用会包含滤镜功能，都各有所长。</p>
<p><img src="http://img.blog.csdn.net/20150420142811120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h1 id="#">#</h1><h1 id="二、相机滤镜介绍">二、相机滤镜介绍</h1><p>1、相机360镜介绍</p>
<p>相机360的滤镜特效类别比较多，每一类别又分为不同的特效。</p>
<p>其最主要的特点是它具有实时拍照滤镜功能，且在关闭重新进入后可记忆之前选择的滤镜。</p>
<p>缺点是滤镜效果一般，而且选择滤镜的交互比较复杂，不好操作。</p>
<p><img src="http://img.blog.csdn.net/20150420142837750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> <img src="http://img.blog.csdn.net/20150420142851821?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>2、魔幻时刻相机滤镜介绍（静态滤镜）</p>
<p>魔幻时刻相机Magic Hour是一款从ios移植过来的优秀拍照软件。</p>
<p>从其滤镜管理和滤镜库的丰富程度就可以看出这款相机的偏重点了！具有大量的滤镜效果且支持下载。滤镜管理页面很“整洁”，易操作。</p>
<p><img src="http://img.blog.csdn.net/20150420142747464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> <img src="http://img.blog.csdn.net/20150420142806091?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h1 id="三、图片美化滤镜">三、图片美化滤镜</h1><p>在图片美化界，美图秀秀是当之无愧的NO.1，其滤镜效果按照tab页的方式分为几类供选择，操作非常直观，且每一种特效都会有非常漂亮的效果。<br><img src="http://img.blog.csdn.net/20150420142950180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Pixlr-0-matic，这款图片处理工具的滤镜不管从UI设计来讲还是从交互来讲都非常赞，而且它的滤镜还有增加光影效果、色相效果等功能，美化照片能力超强。<br><img src="http://img.blog.csdn.net/20150420143004813?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h1 id="四、社交分享滤镜">四、社交分享滤镜</h1><p>社交应用也越来越注重图片分享时的滤镜功能。<br>腾讯微博的滤镜效果如图，交互简洁，清爽，滤镜效果很佳，一推出便得到广泛应用和赞扬。<br><img src="http://img.blog.csdn.net/20150420143018541?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Path是得到普遍认可的优秀产品，包括其滤镜效果。<br>简洁是社交分享滤镜的最主要特点，path的滤镜也承袭了这一风格，且滤镜效果很佳。<br><img src="http://img.blog.csdn.net/20150420143030491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h1 id="五、总结">五、总结</h1><p><img src="http://img.blog.csdn.net/20150420143056527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>1、采用实时拍照滤镜，在成相的同时可以使用户看到自己想要的照片效果。</p>
<p> 2、滤镜种类不宜过多，把握关键的最受用户喜欢的滤镜效果，比如：素描、油画、炫彩、老照片等经典效果。</p>
<p> 3、追求高质量滤镜效果，我们要让每一个滤镜都能够使照片变得更加漂亮，而不是鸡肋效果。</p>
<p> 4、交互上尽量简洁，一目了然，避免多重选择和切换。</p>
<h1 id="七、基于Android平台基本滤镜算法的实现">七、基于Android平台基本滤镜算法的实现</h1><p>1、Android提供了改变图像数值的方法ColorMatrix，通过ColorMatrix方法可以实现基本滤镜，如黑白、灰色、泛黄等效果。</p>
<p>2、通过ColorMatrix改变图像数值，生成变换矩阵，利用矩阵相乘，来改变每个点的像素值。</p>
<p> Matrix =&gt;</p>
<pre><code><span class="label">r1</span> <span class="literal">r2</span> <span class="literal">r3</span> <span class="literal">r4</span>
<span class="label">g1</span> g2 g3 g4
<span class="keyword">b1 </span><span class="keyword">b2 </span><span class="keyword">b3 </span><span class="keyword">b4
</span><span class="label">a1</span> <span class="literal">a2</span> <span class="literal">a3</span> <span class="literal">a4</span>
</code></pre><p>变化以后</p>
<p>R’  =  R <em> r1  +  G </em> r2  +  B <em> r3  +  A </em> r4  +  r5;</p>
<p>G’  =  R <em> g1  +  G </em> g2  +  B <em>g3  +  A </em> g4  +  g5;</p>
<p>B’  =  R <em> b1  +  G </em> b2  +  B <em>b3  +  A </em> b4  +  b5;</p>
<p>A’  =  R <em> a1  +  G </em> a2  +  B <em> a3  +  A </em> a4  +  a5;</p>
<font color="red">第1~3列是控制色相的，第4列是控制透明度的，第5列是分量的增加值</font>

<p>3、R、G、B、A系数值变化会修改图像的效果</p>
<p>（1）对角线值为1.0，其他为0时，图像保证的是原图像</p>
<p><img src="https://img.alicdn.com/imgextra/i3/1025192026/TB2nqz4eVXXXXXMXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<p><img src="http://img.blog.csdn.net/20150421092300819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>（2）对角线值若大于1.0，其他为0时，图像偏亮</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB20ID1eVXXXXadXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<p><img src="http://img.blog.csdn.net/20150421092323704?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>（3）对角线值若小于1.0，其他为0时，图像偏暗</p>
<p><img src="https://img.alicdn.com/imgextra/i3/1025192026/TB21.f5eVXXXXXkXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<p><img src="http://img.blog.csdn.net/20150421092339335?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>（4）设定图像为灰色，通过查资料 R 0.3 G0.59 B 0.11</p>
<p><img src="https://img.alicdn.com/imgextra/i1/1025192026/TB2Epb6eVXXXXc7XXXXXXXXXXXX_!!1025192026.png" alt=""></p>
<p><img src="http://img.blog.csdn.net/20150421092512957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>4、根据以上的实现，实现基本滤镜的算法是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBlackStyle</span><span class="params">(Bitmap src)</span></span>&#123;</span><br><span class="line">			</span><br><span class="line">	Bitmap dst = Bitmap.createBitmap(src.getWidth(),src.getHeight(), Config.ARGB_8888);</span><br><span class="line">			Canvas canvas = <span class="keyword">new</span> Canvas(dst);</span><br><span class="line">			ColorMatrix cm = <span class="keyword">new</span> ColorMatrix();</span><br><span class="line">	        <span class="comment">//设定图像为灰色，通过查资料 R 0.3 G0.59 B 0.11</span></span><br><span class="line">			cm.set(<span class="keyword">new</span> <span class="keyword">float</span>[] &#123; </span><br><span class="line">					<span class="number">0.3f</span>, <span class="number">0.59f</span>, <span class="number">0.11f</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">					<span class="number">0.3f</span>, <span class="number">0.59f</span>, <span class="number">0.11f</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">					<span class="number">0.3f</span>, <span class="number">0.59f</span>, <span class="number">0.11f</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">					<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;);</span><br><span class="line">			Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">			paint.setColorFilter(<span class="keyword">new</span> ColorMatrixColorFilter(cm));</span><br><span class="line">			canvas.drawBitmap(src, <span class="number">0</span>, <span class="number">0</span>, paint);</span><br><span class="line">			<span class="comment">// 保存图像</span></span><br><span class="line">			canvas.save(Canvas.ALL_SAVE_FLAG);</span><br><span class="line">	        <span class="comment">// 存储</span></span><br><span class="line">			canvas.restore();</span><br><span class="line">			<span class="keyword">return</span> dst;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h1 id="八、后滤镜时代">八、后滤镜时代</h1><p>在网上看到一些信息和相机应用，很多相机玩家对手机相机的使用是越来越多，作为手机相机的开发者需要有更多的创意和特性为手机相机添彩！如下几点相机的发展方向供大家参考：</p>
<p><img src="http://img.blog.csdn.net/20150421091600117?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvV1lIdWFuMTAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>（1）实时滤镜</p>
<p>VIDA 是一款来自国内团队的照相应用，它的一大特色就是实时滤镜，在拍摄的同时你已经可以<br>预览到最终的成品。这是一个强化滤镜功能的方向。和单纯的加入新滤镜不同，实时滤镜把握住了<br>所见即所得的精髓。</p>
<p>（2）GIF 动画</p>
<p>  GIFshop 是 一款快速制作定格动画的应用。它结合了动态画面的叙事能力，保留了图片的小体积特点。但 GIFshop 的问题也非常突出，比起记录生活，它更适合于创作一些幽默的动态小品。一旦涉及到 “创作” ，用户的门槛就被无情地提高了。但让画面动起来的想法要比单纯的强化滤镜要走的更远一些。</p>
<p>（3）动态图片<br> Cinemagram 制 作出来的图片可以只在某一特定区域中出现动态效果。你可以那它创建那种网<br> 上流行的“会动的海报”。比起 GIFshop ，它能够让普通的记事照片变得有点魔幻。由于应用的<br> 构思巧妙，因此适合套用在不同的场合中。用户的门槛相对较小，但收获却是挺大的。我将其看作是 GIFshop 的改进版本。</p>
<p>（4）声音+图片</p>
<p>  Picle 是 一款让你在拍摄相片的同时也记录下一段音频的应用。它的好处是让 “画外音” 这一有趣的角色参与照片的叙事。相比上述应用，Picle 进入了另个维度，它考虑到图片的叙事瓶颈，并试图通过加入音频来突破。Picle 所面临的问题是，它建立了一种新的格式，而这种格式目前还只能在 Picle 体系内分享。</p>
<p>  后滤镜时代里各支团队在不同方向上设定了不同的瓶颈，并通过一定的方法来突破。思考的起点无一例外的定在了增强图片叙事能力之上。从目前的情况来看，有一些事项值得注意：</p>
<p>· 体积：不能因为增强了效果而变得臃肿。</p>
<p>· 题材：不能因为特别适合某种题材而狭隘了用户的使用场景。</p>
<p>· 格式：在现有流行的格式上入手，避免使用新格式。</p>
<p>· 门槛：在用户利益和使用复杂度上寻求平衡。</p>
<p>· 多媒体：在图片上做加法，但不能演变成拍摄视频。</p>
<pre><code> 相信随着硬件技术的增强，手机将成为一类新的照相设备。它也许替代不了传统的相机，但
它却能因为应用而变得不可替代。而可以预见的是，滤镜不会是手机照相的最后一站。
</code></pre><h1 id="九，基于Android平台PS特效的自定义算法的实现">九，基于Android平台PS特效的自定义算法的实现</h1><p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB2RrzWeVXXXXaWXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<p>在ARGB颜色空间，分别使用A（Transparency）、R（Red）、G（Green）、B（Blue）四个值来描述一个像素点，那么对于一个宽w高h的图片来说，共有w<em>h个像素点，可以用一个数组对象int [] pixels来表示相应的图片，pixels = { p1,p2,p3…}。在把各个像素点都用ARGB来表示，那么这张图片就可以用一个[w</em>h,4]的矩阵来描述：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pixels = &#123;</span><br><span class="line">        pa1，pr1，pg1，pb1，</span><br><span class="line">        pa2，pr2，pg2，pb2，</span><br><span class="line">        pa3，pr3，pg3，pb3，</span><br><span class="line">        ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>android平台在获取像素方面提供了 Bitmap.getPixels 方法，我需要做的是遍历图像的像素点，对每一个像素点进行计算。然后将计算完的像素点通过Color.red/green/blue 方法处理后，将像素点填回Bitmap，从而得到滤镜后的图像。这种方式比ColorMatrix 要灵活，可以满足PS特效的实现效果。</p>
<p>1、简单的反色滤镜实现</p>
<pre><code>取出图片的像素点，然后用<span class="number">255</span>减去每个像素点，那么得到的就是一张有反色效果的图片
</code></pre><p><img src="http://img.blog.csdn.net/20150424103008605" alt=""></p>
<p>算法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@author</span> neil</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntiColorFilter</span> <span class="keyword">implements</span> <span class="title">ImageFilterInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageData image = <span class="keyword">null</span>; <span class="comment">// 图片信息类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AntiColorFilter</span><span class="params">(Bitmap bmp)</span> </span>&#123;</span><br><span class="line">        image = <span class="keyword">new</span> ImageData(bmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageData <span class="title">imageProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = image.getHeight();</span><br><span class="line">        <span class="keyword">int</span> R, G, B, pixel;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">                R = image.getRComponent(x, y); <span class="comment">// 获取RGB三原色</span></span><br><span class="line">                G = image.getGComponent(x, y);</span><br><span class="line">                B = image.getBComponent(x, y);</span><br><span class="line"></span><br><span class="line">                R = <span class="number">255</span> - R;</span><br><span class="line">                B = <span class="number">255</span> - B;</span><br><span class="line">                G = <span class="number">255</span> - G;</span><br><span class="line"></span><br><span class="line">                image.setPixelColor(x, y, R, G, B);</span><br><span class="line">            &#125; <span class="comment">// x</span></span><br><span class="line">        &#125; <span class="comment">// y  </span></span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、油画滤镜的实现</p>
<p>通过查资料了解到油画滤镜的算法是”用当前点四周一定范围内任意一点的颜色来替代当前点颜色，最常用的是随机的采用相邻点进行替代”</p>
<p><img src="http://img.blog.csdn.net/20150424103107223" alt=""></p>
<p>算法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ImageData <span class="title">imageProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = image.getHeight();</span><br><span class="line">        <span class="keyword">int</span> R, G, B, pixel,xx = <span class="number">0</span>,yy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">                <span class="keyword">int</span> pos = getRandomInt(<span class="number">1</span>, <span class="number">10000</span>) % Model;</span><br><span class="line">                xx = (x + pos) &lt; width ? (x + pos) : (x - pos) &gt;= <span class="number">0</span> ? (x - pos) : x;</span><br><span class="line">                yy = (y + pos) &lt; height ? (y + pos) : (y - pos) &gt;= <span class="number">0</span> ? (y - pos) : y;  </span><br><span class="line"></span><br><span class="line">                R = image.getRComponent(xx, yy); <span class="comment">// 获取RGB三原色</span></span><br><span class="line">                G = image.getGComponent(xx, yy);</span><br><span class="line">                B = image.getBComponent(xx, yy);</span><br><span class="line"></span><br><span class="line">                image.setPixelColor(x, y, R, G, B);</span><br><span class="line">            &#125; <span class="comment">// x</span></span><br><span class="line">        &#125; <span class="comment">// y</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRandomInt</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> min = Math.min(a, b);    </span><br><span class="line">        <span class="keyword">int</span> max = Math.max(a, b);</span><br><span class="line">        <span class="keyword">return</span> min + (<span class="keyword">int</span>)(Math.random() * (max - min + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>3、冰冻滤镜的实现</p>
<p>冰冻滤镜的算法是将像素点颜色加深，每个象素都用RGB三原色来表示，（0，0，0）就是纯黑，而（255，255，255）就是纯白，因此将没个像素点的RGB指变小，颜色就会加深</p>
<p><img src="http://img.blog.csdn.net/20150424103335976" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> width = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = image.getHeight();</span><br><span class="line">        <span class="keyword">int</span> R, G, B, pixel;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">                R = image.getRComponent(x, y); <span class="comment">// 获取RGB三原色</span></span><br><span class="line">                G = image.getGComponent(x, y);</span><br><span class="line">                B = image.getBComponent(x, y);</span><br><span class="line"></span><br><span class="line">                pixel = R - G - B;</span><br><span class="line">                pixel = pixel * <span class="number">3</span> / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (pixel &lt; <span class="number">0</span>)</span><br><span class="line">                    pixel = -pixel;</span><br><span class="line">                <span class="keyword">if</span> (pixel &gt; <span class="number">255</span>)</span><br><span class="line">                    pixel = <span class="number">255</span>;</span><br><span class="line">                R = pixel; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                pixel = G - B - R;</span><br><span class="line">                pixel = pixel * <span class="number">3</span> / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (pixel &lt; <span class="number">0</span>)</span><br><span class="line">                    pixel = -pixel;</span><br><span class="line">                <span class="keyword">if</span> (pixel &gt; <span class="number">255</span>)</span><br><span class="line">                    pixel = <span class="number">255</span>;</span><br><span class="line">                G = pixel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                pixel = B - R - G;</span><br><span class="line">                pixel = pixel * <span class="number">3</span> / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (pixel &lt; <span class="number">0</span>)</span><br><span class="line">                    pixel = -pixel;</span><br><span class="line">                <span class="keyword">if</span> (pixel &gt; <span class="number">255</span>)</span><br><span class="line">                    pixel = <span class="number">255</span>;</span><br><span class="line">                B = pixel;</span><br><span class="line"></span><br><span class="line">                image.setPixelColor(x, y, R, G, B);</span><br><span class="line">            &#125; <span class="comment">// x</span></span><br><span class="line">        &#125; <span class="comment">// y</span></span><br></pre></td></tr></table></figure>
<h1 id="Android_静态滤镜的实现">Android 静态滤镜的实现</h1><p>一、回顾知识点</p>
<p>1、基本滤镜效果的实现（黑白滤镜）</p>
<blockquote>
<p>用到的技术是ColorMatrix。通过改变RGBA的系数，从而改变图像的成像效果。</p>
</blockquote>
<p><img src="https://img.alicdn.com/imgextra/i4/1025192026/TB2rab4eVXXXXXBXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<p>2、PS滤镜效果的实现（反色效果、冰冻效果、油画效果）</p>
<blockquote>
<p>用到的技术是通过遍历图像的像素点，设置图像的像素点的RGB三原色来实现PS效果。</p>
</blockquote>
<p><img src="https://img.alicdn.com/imgextra/i3/1025192026/TB2uIT7eVXXXXcSXXXXXXXXXXXX_!!1025192026.png" alt=""></p>
<h1 id="二、静态滤镜的实现">二、静态滤镜的实现</h1><p>基于之前积累下来的知识点，在对静态滤镜的实现方面做一下提升，还是从两方面进行实现。</p>
<p>1、基本滤镜效果升级版 –&gt; 伪lomo滤镜的实现</p>
<p><img src="https://img.alicdn.com/imgextra/i1/1025192026/TB2VaLYeVXXXXa2XpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<ul>
<li><p>step1：原始图片 </p>
<p> <img src="http://img.blog.csdn.net/20150427101308194" alt=""></p>
</li>
<li><p>step2：ColorMatrix处理 </p>
<p> <img src="http://img.blog.csdn.net/20150427101352389" alt=""></p>
</li>
<li><p>step3：在处理后的图片上覆盖一层彩色lomo图片 </p>
<p> <img src="http://img.blog.csdn.net/20150427101405228" alt=""></p>
</li>
<li><p>step4：覆盖上彩色lomo后的效果 </p>
<p> <img src="http://img.blog.csdn.net/20150427101543171" alt=""></p>
</li>
<li><p>step5：伪lomo滤镜效果 </p>
<p> <img src="http://img.blog.csdn.net/20150427101656142" alt=""></p>
</li>
</ul>
<p>2、PS滤镜效果升级版 –&gt; 老照片滤镜的实现</p>
<p>（1）HSL颜色标准</p>
<ul>
<li>HSL色彩模式是工业界的一种颜色标准，是通过对色调(H)、饱和度(S)、亮度(L)三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜 色的，HSL即是代表色调，饱和度，亮度三个通道的颜色，这个标准几乎包括了人类视力所能感知的所有颜色，是目前运用最广的颜色系统之一。 　　</li>
<li>HSL色彩模式使用HSL模型为图像中每一个像素的HSL分量分配一个0~255范围内的强度值。HSL图像只使用三种通道，就可以使它们按照不同的比例混合，在屏幕上重现16777216种颜色。 　　</li>
<li>在 HSL 模式下，每种 HSL 成分都可使用从 0到 255的值。（其中L是从黑（0）到白（255）渐变） 。</li>
</ul>
<blockquote>
<p>老照片效果的总体思路是，对色调、饱和度、亮度进行处理，而非之前的红绿蓝色调处理。</p>
</blockquote>
<p>（2）算法实现</p>
<p><img src="https://img.alicdn.com/imgextra/i4/1025192026/TB2X4z9eVXXXXcNXXXXXXXXXXXX_!!1025192026.png" alt=""></p>
<ul>
<li><p>效果图 </p>
<p> <img src="http://img.blog.csdn.net/20150427103512371" alt=""></p>
</li>
</ul>
<h1 id="HSL色彩模式">HSL色彩模式</h1><hr>
<p>1、颜色HSL</p>
<pre><code>H： <span class="built_in">hue</span> 色调　　 
： <span class="built_in">saturation</span> 饱和度 　　 
L： lum 亮度
</code></pre><p>2、概述</p>
<ul>
<li>HSL色彩模式是工业界的一种颜色标准，是通过对色调(H)、饱和度(S)、亮度(L)三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜色的，HSL即是代表色调，饱和度，亮度三个通道的颜色，这个标准几乎包括了人类视力所能感知的所有颜色，是目前运用最广的颜色系统之一。 　　</li>
<li>HSL色彩模式使用HSL模型为图像中每一个像素的HSL分量分配一个0~255范围内的强度值。HSL图像只使用三种通道，就可以使它们按照不同的比例混合，在屏幕上重现16777216种颜色。 　　</li>
<li>在 HSL 模式下，每种 HSL 成分都可使用从 0到 255的值。（其中L是从黑（0）到白（255）渐变） 。 </li>
</ul>
<p><img src="http://img.blog.csdn.net/20150428091316148" alt=""></p>
<p>3、HSL与RGB转换</p>
<p>   a. RGB→HSL的算法描述</p>
<blockquote>
<p>步骤1：把RGB值转成【0，1】中数值。 <br><br>步骤2：找出R,G和B中的最大值。 <br><br>步骤3：设L=(maxcolor + mincolor)/2 <br><br>步骤4：如果最大和最小的颜色值相同，即表示灰色，那么S定义为0，而H未定义并在程序中通常写成0。 <br><br>步骤5：否则，测试L： <br><br>　　If L<0.5, s="(maxcolor-mincolor)/(maxcolor" +="" mincolor)="" <="" br=""><br>　　If L&gt;=0.5, S=(maxcolor-mincolor)/(2.0-maxcolor-mincolor) <br><br>步骤6: If R=maxcolor, H=(G-B)/(maxcolor-mincolor) <br><br>　　If G=maxcolor, H=2.0+(B-R)/(maxcolor-mincolor) <br><br>　　If B=maxcolor, H=4.0+(R-G)/(maxcolor-mincolor) <br><br>步骤7：从第6步的计算看，H分成0～6区域。RGB颜色空间是一个立方体而HSL颜色空间是两个六角形      锥体，其中的L是RGB立方体的主对角线。因此，RGB立方体的顶点：红、黄、绿、青、蓝和品红就成为HSL六角形的顶点，而数值0～6就告诉我们H在哪个部分。H=H*60.0,如果H为负值，则加360。</0.5,></p>
</blockquote>
<p>  b. HSL→RGB的算法描述</p>
<blockquote>
<p>步骤1：If S=0,表示灰色，定义R,G和B都为L. <br><br>步骤2：否则，测试L:  <br><br>　　 If L<0.5,temp2=l*(1.0+s) <="" br=""><br>　　 If L&gt;=0.5,temp2=L+S-L<em>S  <br><br>步骤3：temp1=2.0</em>-temp2  <br><br>步骤4：把H转换到0～1。  <br><br>步骤5：对于R,G,B，计算另外的临时值temp3。方法如下： <br><br>　　 for R, temp3=H+1.0/3.0  <br><br>　　 for G, temp3=H  <br><br>　　 for B, temp3=H-1.0/3.0  <br><br>　　 if temp3<0, temp3="temp3+1.0" <="" br=""><br>　　 if temp3&gt;1, temp3=temp3-1.0  <br><br>步骤6：对于R,G,B做如下测试：  <br><br>　　 If 6.0<em>temp3&lt;1,color=temp1+(temp2-temp1)</em>6.0<em>temp3  <br><br>　　 Else if 2.0</em>temp3<1,color=temp2 <="" br=""><br>　　 Else if 3.0<em>temp3<2, <="" br=""><br>　　 color=temp1+(temp2-temp1)</2,></em>((2.0/3.0)-temp3)*6.0  <br><br>　　 Else color=temp1 <br></1,color=temp2></0,></0.5,temp2=l*(1.0+s)></p>
</blockquote>
<ul>
<li>实例 </li>
</ul>
<p><img src="http://img.blog.csdn.net/20150428091943951" alt=""><br><img src="http://img.blog.csdn.net/20150428092104196" alt=""></p>
<hr>
<h1 id="HSL色彩模式与RGB色彩模式转换代码实现">HSL色彩模式与RGB色彩模式转换代码实现</h1><pre><code><span class="built_in">RGB</span>色彩模式
</code></pre><p><img src="http://img.blog.csdn.net/20150512095634270" alt=""></p>
<pre><code>HSL色彩模式
</code></pre><p><img src="http://img.blog.csdn.net/20150512095649121" alt=""></p>
<p>HSL色彩模式与RGB色彩模式转换算法</p>
<blockquote>
<blockquote>
<p>HSL与RGB转换</p>
</blockquote>
</blockquote>
<ul>
<li><p>RGB类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorRGB</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> r;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> g;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> b;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>HSL类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorHSL</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> s;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> l;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>a) RGB→HSL的算法描述。</p>
<blockquote>
<p>步骤1：把RGB值转成【0，1】中数值。 <br><br>步骤2：找出R,G和B中的最大值。  <br><br>步骤3：设L=(maxcolor + mincolor)/2  <br><br>步骤4：如果最大和最小的颜色值相同，即表示灰色，那么S定义为0，而H未定义并在程 序中通常写成       0。  <br><br>步骤5：否则，测试L：  <br><br>　　If L<0.5, s="(maxcolor-mincolor)/(maxcolor" +="" mincolor)="" <br=""><br>　　If L&gt;=0.5, S=(maxcolor-mincolor)/(2.0-maxcolor-mincolor)  <br><br>步骤6: If R=maxcolor, H=(G-B)/(maxcolor-mincolor)  <br><br>　　If G=maxcolor, H=2.0+(B-R)/(maxcolor-mincolor)  <br><br>　　If B=maxcolor, H=4.0+(R-G)/(maxcolor-mincolor)  <br><br>步骤7：从第6步的计算看，H分成0～6区域。RGB颜色空间是一个立方体而HSL颜色空间是两个六角形锥体，其中的L是RGB立方体的主对角线。因此，RGB立方体的顶点：红、黄、绿、青、蓝和品红就成为HSL六角形的顶点，而数值0～6就告诉我们H在哪个部分。H=H*60.0,如果H为负值，则加360。 <br></0.5,></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ColorHSL <span class="title">colorRGBToHSL</span><span class="params">(ColorRGB rgb)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ColorHSL hsl = <span class="keyword">new</span> ColorHSL();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> r, g, b, h, s, l;</span><br><span class="line">    r = rgb.r / <span class="number">255.0f</span>;</span><br><span class="line">    g = rgb.g / <span class="number">255.0f</span>;</span><br><span class="line">    b = rgb.b / <span class="number">255.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> maxColor = Math.max(r, Math.max(g, b));</span><br><span class="line">    <span class="keyword">float</span> minColor = Math.min(r, Math.min(g, b));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (maxColor == minColor) &#123;</span><br><span class="line">        h = <span class="number">0.0f</span>;</span><br><span class="line">        s = <span class="number">0.0f</span>;</span><br><span class="line">        l = r;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l = (minColor + maxColor) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l &lt; <span class="number">0.5</span>)</span><br><span class="line">            s = (maxColor - minColor) / (maxColor + minColor);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s = (<span class="keyword">float</span>) ((maxColor - minColor) / (<span class="number">2.0</span> - maxColor - </span><br><span class="line">                 minColor));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r == maxColor)</span><br><span class="line">            h = (g - b) / (maxColor - minColor);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (g == maxColor)</span><br><span class="line">            h = (<span class="keyword">float</span>) (<span class="number">2.0</span> + (b - r) / (maxColor - minColor));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h = (<span class="keyword">float</span>) (<span class="number">4.0</span> + (r - g) / (maxColor - minColor));</span><br><span class="line"></span><br><span class="line">        h /= <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">if</span> (h &lt; <span class="number">0</span>)</span><br><span class="line">            h++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hsl.h = (<span class="keyword">int</span>) Math.round(h * <span class="number">360.0</span>);</span><br><span class="line">    hsl.s = s;</span><br><span class="line">    hsl.l = l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hsl;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>b) HSL→RGB的算法描述</p>
<blockquote>
<p>步骤1：If S=0,表示灰色，定义R,G和B都为L. <br><br>步骤2：否则，测试L:  <br><br>　　 If L<0.5,temp2=l*(1.0+s) <br=""><br>　　 If L&gt;=0.5,temp2=L+S-L<em>S  <br><br>步骤3：temp1=2.0</em>-temp2  <br><br>步骤4：把H转换到0～1。  <br><br>步骤5：对于R,G,B，计算另外的临时值temp3。方法如下：  <br><br>　　 for R, temp3=H+1.0/3.0  <br><br>　　 for G, temp3=H  <br><br>　　 for B, temp3=H-1.0/3.0  <br><br>　　 if temp3<0, temp3="temp3+1.0" <br=""><br>　　 if temp3&gt;1, temp3=temp3-1.0  <br><br>步骤6：对于R,G,B做如下测试：  <br><br>　　 If 6.0<em>temp3&lt;1,color=temp1+(temp2-temp1)</em>6.0<em>temp3  <br><br>　　 Else if 2.0</em>temp3<1,color=temp2 <br=""><br>　　 Else if 3.0<em>temp3<2, <br=""><br>　　 color=temp1+(temp2-temp1)</2,></em>((2.0/3.0)-temp3)*6.0  <br><br>　　 Else color=temp1 <br></1,color=temp2></0,></0.5,temp2=l*(1.0+s)></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ColorRGB <span class="title">colorHSLToRGB</span><span class="params">(ColorHSL hsl)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ColorRGB rgb = <span class="keyword">new</span> ColorRGB();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> r, g, b, h, s, l;</span><br><span class="line">    <span class="keyword">float</span> temp1, temp2, tempr, tempg, tempb;</span><br><span class="line">    h = hsl.h / <span class="number">360.0f</span>;</span><br><span class="line">    s = hsl.s;</span><br><span class="line">    l = hsl.l;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="number">0</span>) &#123;</span><br><span class="line">        r = g = b = l;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; <span class="number">0.5</span>)</span><br><span class="line">            temp2 = l * (<span class="number">1</span> + s);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp2 = (l + s) - (l * s);</span><br><span class="line">        temp1 = <span class="number">2</span> * l - temp2;</span><br><span class="line">        tempr = (<span class="keyword">float</span>) (h + <span class="number">1.0</span> / <span class="number">3.0</span>);</span><br><span class="line">        <span class="keyword">if</span> (tempr &gt; <span class="number">1</span>)</span><br><span class="line">            tempr--;</span><br><span class="line">        tempg = h;</span><br><span class="line">        tempb = (<span class="keyword">float</span>) (h - <span class="number">1.0</span> / <span class="number">3.0</span>);</span><br><span class="line">        <span class="keyword">if</span> (tempb &lt; <span class="number">0</span>)</span><br><span class="line">            tempb++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Red</span></span><br><span class="line">        <span class="keyword">if</span> (tempr &lt; <span class="number">1.0</span> / <span class="number">6.0</span>)</span><br><span class="line">            r = (<span class="keyword">float</span>) (temp1 + (temp2 - temp1) * <span class="number">6.0</span> * tempr);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempr &lt; <span class="number">0.5</span>)</span><br><span class="line">            r = temp2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempr &lt; <span class="number">2.0</span> / <span class="number">3.0</span>)</span><br><span class="line">            r = (<span class="keyword">float</span>) (temp1 + (temp2 - temp1) * ((<span class="number">2.0</span> / <span class="number">3.0</span>) - tempr)</span><br><span class="line">                        * <span class="number">6.0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = temp1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Green</span></span><br><span class="line">        <span class="keyword">if</span> (tempg &lt; <span class="number">1.0</span> / <span class="number">6.0</span>)</span><br><span class="line">            g = (<span class="keyword">float</span>) (temp1 + (temp2 - temp1) * <span class="number">6.0</span> * tempg);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempg &lt; <span class="number">0.5</span>)</span><br><span class="line">            g = temp2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempg &lt; <span class="number">2.0</span> / <span class="number">3.0</span>)</span><br><span class="line">            g = (<span class="keyword">float</span>) (temp1 + (temp2 - temp1) * ((<span class="number">2.0</span> / <span class="number">3.0</span>) - tempg)</span><br><span class="line">                        * <span class="number">6.0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            g = temp1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Blue</span></span><br><span class="line">        <span class="keyword">if</span> (tempb &lt; <span class="number">1.0</span> / <span class="number">6.0</span>)</span><br><span class="line">            b = (<span class="keyword">float</span>) (temp1 + (temp2 - temp1) * <span class="number">6.0</span> * tempb);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempb &lt; <span class="number">0.5</span>)</span><br><span class="line">            b = temp2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempb &lt; <span class="number">2.0</span> / <span class="number">3.0</span>)</span><br><span class="line">            b = (<span class="keyword">float</span>) (temp1 + (temp2 - temp1) * ((<span class="number">2.0</span> / <span class="number">3.0</span>) - tempb)</span><br><span class="line">                        * <span class="number">6.0</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b = temp1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rgb.r = (<span class="keyword">int</span>) Math.round(r * <span class="number">255.0</span>);</span><br><span class="line">    rgb.g = (<span class="keyword">int</span>) Math.round(g * <span class="number">255.0</span>);</span><br><span class="line">    rgb.b = (<span class="keyword">int</span>) Math.round(b * <span class="number">255.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rgb;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Android_Camera可以做哪些？">Android Camera可以做哪些？</h1><p>1、功能</p>
<ul>
<li>拍摄相片</li>
<li>视频录制</li>
<li>取景器(扫描类应用，如人脸识别，名片识别，条形码识别)</li>
</ul>
<p>2、根据Camera API实现自己的拍照程序，共7步</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB20JLReVXXXXcPXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<h1 id="Camera_Preview是什么？">Camera Preview是什么？</h1><p><img src="http://img.blog.csdn.net/20150520174146432" alt=""></p>
<p>摄像头返回的RAW数据经过isp处理后形成yuv数据，android系统将该数据绘制到取景区上，不断绘制帧数据形成实时预览数据。</p>
<h1 id="如何获取Camera_Preview中的数据？">如何获取Camera Preview中的数据？</h1><ul>
<li>Camera.PreviewCallback</li>
<li>setPreviewCallback <br><br>屏幕上显示一个新的预览帧时调用onPreviewFrame方法（时时获取）</li>
<li>setPreviewCallbackWithBuffer <br><br>其与setPreviewCallback的工作方式相同，但要求指定一个字节数 <br><br>组作为缓冲区，用于预览图像数据（addCallbackBuffer）</li>
</ul>
<h1 id="Android_Camera_实时滤镜怎么做？">Android Camera 实时滤镜怎么做？</h1><p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB2rs23eVXXXXacXpXXXXXXXXXX_!!1025192026.png" alt=""></p>
<blockquote>
<p>YUV转RGB的算法，转换的公式一般如下，也是线性的关系： <br><br>R = Y + 1.14V  <br><br>G = Y - 0.39U - 0.58V  <br><br>B = Y + 2.03U <br></p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150520175251648" alt=""></p>
<blockquote>
<p>问题 <br><br>1、屏幕卡顿，用户体验低  <br><br>2、性能低，影响系统性能 <br><br> <br><br>如何优化？  <br></p>
<ul>
<li>提高流程度  <br><br>图像渲染采用OpenGL ES SurfaceTexture  <br></li>
<li>提高性能  <br><br>GPU优化 <br></li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-Parallax(仿QQ空间首页下拉效果)]]></title>
      <link href="http://www.cblog.cc/2015/09/03/Android-Parallax-%E4%BB%BFQQ%E7%A9%BA%E9%97%B4%E9%A6%96%E9%A1%B5%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/"/>
      <url>http://www.cblog.cc/2015/09/03/Android-Parallax-%E4%BB%BFQQ%E7%A9%BA%E9%97%B4%E9%A6%96%E9%A1%B5%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>一直觉得QQ空间首页的下拉刷新效果不错，挺舒服，正好这几天放假决定撸一库出来</p>
<p>觉得不错的小伙伴 <a href="https://github.com/devsoulwolf/Android-ParallaxRefresh" target="_blank" rel="external">戳这里</a></p>
<hr>
<p>先上效果图</p>
<p><img src="https://img.alicdn.com/imgextra/i3/1025192026/TB2pBIHeVXXXXb3XXXXXXXXXXXX_!!1025192026.gif" alt="Sample"><br><img src="https://img.alicdn.com/imgextra/i4/1025192026/TB2yYAweVXXXXaIXpXXXXXXXXXX_!!1025192026.gif" alt="Sample"></p>
<blockquote>
<p>代码比较简单，基本原理就是处理ParallaxScrollLayout中的onInterceptTouchEvent和onTouchEvent方法实现滚动的拦截和移动列表，采用v4包中的ViewCompat.setTranslationY(mParallaxTarget,translationY);类来移动列表，</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (e.getAction()) &#123;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">               mTouchStartY = e.getY();</span><br><span class="line">               mCurrentY = mTouchStartY;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">               <span class="keyword">float</span> currentY = e.getY();</span><br><span class="line">               <span class="keyword">float</span> dy = currentY - mTouchStartY;</span><br><span class="line">               <span class="keyword">if</span> (dy &gt; mTouchSlop &amp;&amp; !Utils.canChildScrollUp(mParallaxTarget)) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(@NonNull MotionEvent e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (e.getAction()) &#123;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">               mCurrentY = e.getY();</span><br><span class="line">               <span class="keyword">float</span> dy = Utils.constrains(mCurrentY - mTouchStartY, <span class="number">0</span>, getMaxScrollY() * <span class="number">2</span>);</span><br><span class="line">               <span class="keyword">if</span>(mParallaxTarget != <span class="keyword">null</span>)&#123;</span><br><span class="line">                   <span class="keyword">float</span> translationY = DECELERATE_INTERPOLATOR.getInterpolation(dy / getMaxScrollY() / <span class="number">2</span>) * dy / <span class="number">2</span>;</span><br><span class="line">                   ViewCompat.setTranslationY(mParallaxTarget,translationY);</span><br><span class="line">                   onParallaxScrollChanged(<span class="number">0</span>, (<span class="keyword">int</span>) -translationY,<span class="keyword">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">           <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">               rollback();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后在手指抬起的时候回滚到原始位置，触发刷新</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(tryParallaxHolder())&#123;</span><br><span class="line">           mParallaxHolder.onRollback();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(hasPlaceReset())&#123;</span><br><span class="line">           RollbackAnimation animation = <span class="keyword">new</span> RollbackAnimation(mParallaxTarget,</span><br><span class="line">                   <span class="number">0</span>,getMaxScrollY());</span><br><span class="line">           animation.setInterpolator(ROLLBACK_INTERPOLATOR);</span><br><span class="line">           animation.setDuration(ROLLBACK_DURATION);</span><br><span class="line">           animation.start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ParallaxScrollLayout类是一个FrameLayout，通过setParallaxHolder(IParallaxHolder holder)方法初始化头部的背景View，头部View的显示区域是在ScrollView或者ListView的顶部添加了一个展位视图（PlaceholderView），如果滚动列表是一个ListView的时候，千万不能给ListView设置背景，否则就会导致头部背景View看不到了，因为被ListView盖住了，ScrollView则没有限制，ScrollView的内部做了处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseParallaxHolder</span> <span class="keyword">implements</span> <span class="title">IParallaxHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> PARALLAX_RATIO = <span class="number">5.0f</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Interpolator ROLLBACK_INTERPOLATOR = <span class="keyword">new</span> DecelerateInterpolator();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span>         ROLLBACK_DURATION     = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Context mContext;</span><br><span class="line">    <span class="keyword">protected</span> ParallaxMode mParallaxMode;</span><br><span class="line">    <span class="keyword">private</span> View mContentView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRealWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRealHeight;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasured</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mRealWidth = width;</span><br><span class="line">        <span class="keyword">this</span>.mRealHeight = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRealWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRealWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRealHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRealHeight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setParallaxMode</span><span class="params">(@NonNull ParallaxMode mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mParallaxMode = mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">(<span class="keyword">int</span> scrollX, <span class="keyword">int</span> scrollY, <span class="keyword">boolean</span> isTouchEvent)</span> </span>&#123;</span><br><span class="line">        ViewCompat.setTranslationY(mContentView,Utils.constrains(-scrollY / PARALLAX_RATIO,<span class="number">0</span>,getParallaxTop()));</span><br><span class="line">        <span class="keyword">if</span>(mParallaxMode == ParallaxMode.PARALLAX_MODE_SCROLL</span><br><span class="line">                &amp;&amp; scrollY &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            ViewCompat.setTranslationY(mContentView,-scrollY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ViewCompat.getTranslationY(mContentView) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            Animation animation = ObjectAnimator.ofTranslationY(mContentView,<span class="number">0</span>);</span><br><span class="line">            animation.setDuration(ROLLBACK_DURATION);</span><br><span class="line">            animation.setInterpolator(ROLLBACK_INTERPOLATOR);</span><br><span class="line">            animation.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mContext = <span class="keyword">null</span>;</span><br><span class="line">        mContentView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container)</span> </span>&#123;</span><br><span class="line">        mContentView = onCreateView(inflater,container,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> mContentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,<span class="keyword">boolean</span> attachRoot)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> View <span class="title">findViewById</span><span class="params">(View container,@IdRes <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> container == <span class="keyword">null</span> ? <span class="keyword">null</span> : container.findViewById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> View <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findViewById(getContentView(),id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getContentView</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mContentView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>BaseParallaxHolder 类是用来初始化头部背景View和实现视差滚动的，监听滚动列表的滚动事件，回调onScrollChanged(int scrollX, int scrollY, boolean isTouchEvent)方法来移动头部背景View，如果你有不喜欢我的这种移动方式，则可以重写该方法实现自己想要的效果。<br>大家可以看到 该类中有一个 枚举 ParallaxMode，这个是用来控制在列表滚动的时候是否需要头部背景View跟随列表一起滚动，可以通过ParallaxScrollLayout的自定义参数psvParallaxMode在布局文件中指定。</p>
</blockquote>
<p>关于滚动视图我只实现了ScrollView(ParallaxScrollView)和ListView(ParallaxListView)<br>如果你用到了其他的滚动视图或者是自定义的滚动视图，不要担心，你只需要让该视图实现ParallaxScrollObserver接口，并完成回调就可以了。</p>
<blockquote>
<p>使用方法也很简单</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">net.soulwolf.widget.parallaxrefresh.ParallaxScrollLayout</span></span><br><span class="line">       <span class="attribute">android:id</span>=<span class="value">"@+id/parallax"</span></span><br><span class="line">       <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">       <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="title">net.soulwolf.widget.parallaxrefresh.widget.ParallaxListView</span></span><br><span class="line">           <span class="attribute">android:id</span>=<span class="value">"@+id/list"</span></span><br><span class="line">           <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">           <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="title">net.soulwolf.widget.parallaxrefresh.ParallaxScrollLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>net.soulwolf.widget.parallaxrefresh.widget.ParallaxListView可以替换成其他滚动视图，需要注意的是ParallaxScrollLayout只能包含一个滚动视图，如果你包含了多个，则会使用第一个。</p>
<p>然后在Java代码找到ParallaxScrollLayout控件，设置ParallaxHolder可以了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mParallaxScrollLayout = (ParallaxScrollLayout) findViewById(R.id.parallax);</span><br><span class="line">   mParallaxScrollLayout.setParallaxHolder(<span class="keyword">new</span> SimpleParallaxHolder());</span><br><span class="line">   mParallaxScrollLayout.setRefreshRatio(.<span class="number">8f</span>);</span><br><span class="line">   mParallaxScrollLayout.setOnRefreshListener(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>setRefreshRatio表示下拉的时候是否需要刷新的界限的百分比，取值的（0.0f-1.0f）之间<br>setOnRefreshListener 设置刷新监听</p>
</blockquote>
<p>Android-Parallax就介绍到这里，如果你有任何问题都可以给我发邮件(it_power@foxmail.com)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[New environment,new start]]></title>
      <link href="http://www.cblog.cc/2015/09/03/New-environment-new-start/"/>
      <url>http://www.cblog.cc/2015/09/03/New-environment-new-start/</url>
      <content type="html"><![CDATA[<p>谢谢你，懂我的人，一路默默的陪我，让我拥有好故事可以说</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB2ndrReVXXXXb0XpXXXXXXXXXX_!!1025192026.jpg" alt=""></p>
<p>这一路走来，有欢笑也有泪水，有喜悦也有痛苦，有悲欢也有离合，这就是成长.</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB2t9_.eVXXXXbgXXXXXXXXXXXX_!!1025192026.jpeg" alt=""></p>
<p>其实，如果让每个人都从事自己终身喜爱的职业，那一定是一件很幸福的事，但人生有无数种可能和选择，不管儿时的梦想能否实现，都应该努力让自己的每一天过得充实而有价值。</p>
<p><img src="https://img.alicdn.com/imgextra/i2/1025192026/TB2wA7deVXXXXXLXXXXXXXXXXXX_!!1025192026.jpg" alt=""></p>
]]></content>
    </entry>
    
  
  
</search>